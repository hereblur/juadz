"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[336],{1184:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(4041);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}},6312:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"tutorial/authentication","title":"Authentication","description":"Every Juadz application requires an authentication provider, which transforms incoming requests into an ACLActor. This actor object is used throughout the framework to enforce access control.","source":"@site/docs/tutorial/7-authentication.md","sourceDirName":"tutorial","slug":"/tutorial/authentication","permalink":"/juadz/docs/tutorial/authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/7-authentication.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Routing","permalink":"/juadz/docs/tutorial/routing"}}');var s=t(1085),i=t(1184);const o={sidebar_position:7},a="Authentication",c={},u=[{value:"AuthenticationProvider",id:"authenticationprovider",level:2},{value:"ACLActor",id:"aclactor",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"authentication",children:"Authentication"})}),"\n",(0,s.jsxs)(n.p,{children:["Every Juadz application requires an authentication provider, which transforms incoming requests into an ",(0,s.jsx)(n.code,{children:"ACLActor"}),". This actor object is used throughout the framework to enforce access control."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"authenticationprovider",children:"AuthenticationProvider"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.code,{children:"AuthenticationProvider"})," is a module that verifies requests and returns an ",(0,s.jsx)(n.code,{children:"ACLActor"}),". You can implement authentication using API keys, JWT tokens, sessions, or any custom logic."]}),"\n",(0,s.jsx)(n.p,{children:"Here is an example of an API key authentication provider:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const API_KEY = 'example-api-key';\n\nconst myAuthProvider = {\n    apiKey: {\n        type: \"apiKey\",\n        in: \"header\",\n        name: \"x-api-key\",\n        func: async (headers) => {\n            // Extract the API key from request headers\n            const token = headers ? headers['x-api-key'] : null;\n\n            // If the token is missing or invalid, return null (authentication fails)\n            if (!token || token !== API_KEY) {\n                return null;\n            }\n\n            // If valid, return an ACLActor with permissions\n            return {\n                permissions: [\n                    'view.users',\n                    'update.users',\n                    'create.users'\n                ]\n            };\n        }\n    }\n} as IAuthProvider;\n\n// Assign the authentication provider to your resource\nUserResource.setAuthentication(['apiKey']);\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can define multiple authentication providers for a resource. The first provider that successfully authenticates the request will be used."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"aclactor",children:"ACLActor"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.code,{children:"ACLActor"})," is a simple object that holds a list of permissions:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const acl: ACLActor = {\n    permissions: ['create.users', 'update.users', 'create.orders']\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"This object is passed through the Juadz ecosystem to verify access before any resource operation."}),"\n",(0,s.jsxs)(n.p,{children:["You can extend ",(0,s.jsx)(n.code,{children:"ACLActor"})," to include additional fields, such as ",(0,s.jsx)(n.code,{children:"username"})," or ",(0,s.jsx)(n.code,{children:"user_id"}),", if you need them in hooks or other parts of your application:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"interface MyActor extends ACLActor {\n    username: string;\n}\n\nconst acl: MyActor = {\n    permissions: ['create.users', 'update.users', 'create.orders'],\n    username: 'root'\n};\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"By implementing custom authentication providers and using the ACLActor pattern, Juadz gives you fine-grained control over access to your"})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);