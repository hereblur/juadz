"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[668],{1184:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var r=s(4041);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}},3511:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorial/schema","title":"Resource Schema","description":"Juadz is a schema-centric framework: you define a schema for each resource, and Juadz automatically generates the necessary API endpoints, validation, and documentation.","source":"@site/docs/tutorial/3-schema.md","sourceDirName":"tutorial","slug":"/tutorial/schema","permalink":"/juadz/docs/tutorial/schema","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial/3-schema.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Juadz Concepts and Architecture","permalink":"/juadz/docs/tutorial/concepts"},"next":{"title":"Data Repository","permalink":"/juadz/docs/tutorial/data-repository"}}');var i=s(1085),a=s(1184);const t={sidebar_position:3},o="Resource Schema",l={},d=[{value:"Defining Your First Schema",id:"defining-your-first-schema",level:2},{value:"Field Flags",id:"field-flags",level:2},{value:"Flag Reference",id:"flag-reference",level:3},{value:"Flag Behavior",id:"flag-behavior",level:3}];function c(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"resource-schema",children:"Resource Schema"})}),"\n",(0,i.jsx)(n.p,{children:"Juadz is a schema-centric framework: you define a schema for each resource, and Juadz automatically generates the necessary API endpoints, validation, and documentation."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"defining-your-first-schema",children:"Defining Your First Schema"}),"\n",(0,i.jsxs)(n.p,{children:["Juadz uses ",(0,i.jsx)(n.a,{href:"https://zod.dev/",children:(0,i.jsx)(n.code,{children:"zod"})})," for schema definition. Simply describe your resource structure using Zod, and Juadz will handle the rest."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="database/user.ts"',children:'import { z } from "zod";\n\nconst userSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  age: z.number().min(18),\n  password: z.string().min(8),\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This example demonstrates a minimal schema for a user resource.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.strong,{children:"Note:"})," The ",(0,i.jsx)(n.code,{children:"id"})," field is required for all schemas."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"field-flags",children:"Field Flags"}),"\n",(0,i.jsxs)(n.p,{children:["Juadz uses flags to control the behavior of resource fields. Flags are set using Zod\u2019s ",(0,i.jsx)(n.code,{children:".meta()"})," method and allow you to customize how each field is handled by the API."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="database/user.ts"',children:'const userSchema = z.object({\n  id: z.number().meta({ $create: false, $update: false }),\n    // "id" is auto-incremented and cannot be set or changed via the API.\n\n  name: z.string().meta({ $search: true }),\n    // Enables free-text search on the "name" field.\n\n  age: z.number().min(18),\n\n  salary: z.number().meta({ $view: \'manager\', $update: \'manager\' }),\n    // Only users with the "manager" permission can view or update "salary".\n\n  password: z.string().min(8).meta({ $view: false }),\n    // "password" will never be included in API responses.\n});\n\ntype TUser = z.infer<typeof userSchema>;\n//You can use Zod\'s type inference to automatically generate TypeScript types, such as `TUser`, for type-safe coding throughout your application.\n\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"flag-reference",children:"Flag Reference"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$create"}),": ",(0,i.jsx)(n.code,{children:"boolean"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),")",(0,i.jsx)(n.br,{}),"\n","Controls whether the field can be set during creation."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$update"}),": ",(0,i.jsx)(n.code,{children:"boolean | string"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),")",(0,i.jsx)(n.br,{}),"\n","Controls whether the field can be updated. If set to a string, only users with the specified permission can update."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$view"}),": ",(0,i.jsx)(n.code,{children:"boolean | string"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),")",(0,i.jsx)(n.br,{}),"\n","Controls whether the field is visible in API responses. If set to a string, only users with the specified permission can view."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$virtual"}),": ",(0,i.jsx)(n.code,{children:"boolean"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),")",(0,i.jsx)(n.br,{}),"\n","Marks the field as virtual; it will not be persisted to the database."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$search"}),": ",(0,i.jsx)(n.code,{children:"boolean"})," (default: ",(0,i.jsx)(n.code,{children:"false"}),")",(0,i.jsx)(n.br,{}),"\n","Includes the field in free-text search queries. Use with caution and ensure proper indexing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$filter"}),": ",(0,i.jsx)(n.code,{children:"boolean"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),")",(0,i.jsx)(n.br,{}),"\n","Allows the field to be used in filter queries."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"$sort"}),": ",(0,i.jsx)(n.code,{children:"boolean"})," (default: ",(0,i.jsx)(n.code,{children:"true"}),")",(0,i.jsx)(n.br,{}),"\n","Allows the field to be used in sort queries."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"flag-behavior",children:"Flag Behavior"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If a flag is set to ",(0,i.jsx)(n.code,{children:"false"}),", the field is excluded from the corresponding API operation."]}),"\n",(0,i.jsx)(n.li,{children:"If a flag is set to a string (e.g., a permission name), only users with that permission can access or modify the field."}),"\n",(0,i.jsxs)(n.li,{children:["Attempting to update a field with ",(0,i.jsx)(n.code,{children:"$update: false"})," will result in a ",(0,i.jsx)(n.code,{children:"400 Bad Request"})," error."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"By leveraging schemas and flags, Juadz enables you to precisely control resource behavior, validation, and access control\u2014all from a single, unified configuration. This approach simplifies API development and ensures consistent, secure handling of data across your application."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);